#!/bin/sh
#
# These variables can be modified to change the way the riometer
#  app runs
#
numcpus=`cat /proc/cpuinfo|grep -i ogomi|wc -l`

single=False

if [ $# -ge 1 ]
then
	single=True
fi

#
# Where does data go?
#
if [ -e /mnt/riometer_data ]
then
	DATAPLACE=/mnt/riometer_data
else
	DATAPLACE="."
fi

cd $DATAPLACE

#
# GEO
#
LONGITUDE=-76.03

#
# The three SKY frequencies
#
F1=30.0e6
F2=38.2e6
#
# Apparent 4dB gain drop below 26MHz on R820T2, so
#  Try in the maritime mobile band--we're inland quite a bit...
#
F3=26.125e6

#
# REF noise temperature estimate
#
# THIS will definitely require some tweaking
#
#
REFTEMP=350e3

#
# Sample rate:  For Odroid C1, 300e3 is max possible
#  For Odroid XU4 (and better) systems, 1.2e6 works out well
#
#
cputype=`uname -m`
if [ $numcpus -ge 6 -o $cputype = 'x86_64' ]
then
	SRATE=902000
	BUFLEN=8192
else
	SRATE=300000
	BUFLEN=4096
fi

#
# Decimation factor
#
# This gives you your final sample-rate==SRATE/DECIM
#
# The final pre-detector bandwidth is about 75% of this
# We're going to target 150kHz, regardless
#
#
BW=150000
if [ $SRATE = 902000 ]
then
	BW=250000
fi

d=`expr $SRATE / $BW`
DECIM=$d

#
# Set this to 1 indicate "this is a slow computer"
#
# DEFINITELY turn this on for Odroid C1
#
if [ $numcpus -ge 6 -o $cputype = 'x86_64' ]
then
    SLOW=0
else
    SLOW=1
fi

#
# Internal update rate (Hz)
#
# Sets how often signals are evaluated internally, and fresh
#  internal estimates produced for REF side and SKY side data.
#
# For Odroid XU4 and faster, this can be 50
#  faster than 50 isn't really practical
#
#
if [ $numcpus -ge 6 -o $cputype = 'x86_64' ]
then
    URATE=50
else
    URATE=30
fi

#
# Probably shouldn't modify below here unless you know what you're doing
#
#######################################################################################################################
#######################################################################################################################
#
# We may come up before NTP has had a chance to synchronize system time,
#  so, wait a bit
#
if [ $single = False ]
then
    sleep 20
fi

python2 -m SimpleHTTPServer >server.log 2>&1 &
httppid=$!

#
# Loop forever restarting the app if it crashes
#
while true
do
    #
    # Nuke old .log files
    #
	find $HOME -type f -mtime +2 -name 'riometer-*.log' -exec rm -f '{}' ";"
	date=`date +%Y%m%d%H%M`
	LOGFILE=riometer-$date.log

    #
    # Invoke riometer app
    #
	riometer_iv.py --device "rtl=SKY,buflen=$BUFLEN rtl=REF,buflen=$BUFLEN" --freq $F1 \
	   --freq2 $F2 --freq3 $F3 --tsys 400 --tsysref 400 \
	  --reftemp 165e3 --srate $SRATE --decim $DECIM --rfgain 40  --longitude $LONGITUDE \
	  --refgain 40 --urate $URATE --prefix $DATAPLACE/ --finterval 3600 --swrate 0.75 --slow $SLOW >>$LOGFILE 2>&1
	
	if [ $single = True ]
	then
		break
	fi
	#
	# To force manual exit of this loop
	#
	if [ -e stop_riometer ]
	then
		rm -f stop_riometer
		echo Stopping riometer restart loop
		break
	fi
	echo Restarting riometer in 10 seconds
	sleep 10
	echo Restart in progress
done

kill $httpid
